datacube.queryCache.enabled = false
172.16.32.7 - vnc client
https://redmine.avicomp.ru/issues/27453
ssh avicomp@172.16.32.3 - krb datamonitor server

1) Реализовано в виде дополнительного оператора запроса $recursiveTree со следующими опциями:
- $idField - задает поле с идентификатором строки (условно дочерний идентификатор)
- $parentIdField - задает поле с идентификатором родителя для строки (используется при join для поиска родительских и дочерних элементов)
- $direction - задает направление поиска, только дочерние, только родительские, или и то и то
- $startFilter - задает условие начала поиска, фильтр, который должен вернуть первый элемент (либо рутовый, либо произвольный, если поиск нужно осуществить из середины дерева)

2) Принцип примерно следующий: формируется объединение 2х рекурсивных запросов (первый для поиска вверх, второй для поиска вниз), каждый из них содержит объединение стартового запроса и рекурсивной части с JOIN.

3) Пока непонятно как быть с глобальным фильтром в дашборде, т.к. стандартный фильтр может ограничить всю выборку и искать будет не из чего. По-хорошему в такой запрос фильтр дашборда надо доабвлять в $startFilter, если фильтруется исключительно элемент дерева, и в обычный фильтр ($cubeFilter), если просто ограничивается вся выборка. Тут надо принимать решение исходя из реального кейса.

4) Дополнительные конструкции запроса (типа $groupBy) лучше задавать отдельным запросом, а рекурсивынй сделать источником: либо вынести рекурсивный запрос в $from, либо в $views, либо сделать в виде среза от среза.


*Пример*

Возвращает только родителей для "Код ВМО" = "9800". Если задать $direction=0, то вернет и родительские и дочерние. Если задать $direction=-1, то вернет только дочерние. $distinct используется в запросе, чтобы исключить повторения (особенно актуально при поиске родительских, т.к. формируется много дублей).

<pre>
{
  "$context": "main",
  "$distinct": true,
  "$select": {
    "Код ВМО2": "Код ВМО",
    "Родитель": "Родитель",
    "ВМО": "ВМО",
    "Наименование": "Наименование",
    "Краткое наименование": "Краткое наименование",
    "Тип ВМО": "Тип ВМО",
    "Округ": "Округ",
    "ОКАТО": "ОКАТО"
  },
  "$recursiveTree": {
    "$idField": "Код ВМО2",
    "$parentIdField": "Родитель",
    "$direction": 1,
    "$startFilter": {
      "Код ВМО": {
        "$eq": {
          "$const": "9800"
        }
      }
    }
  }
}
</pre>






{
  "$context": "main",
  "$select": {
    "Код ВМО": "Код ВМО2",
    "Родитель": "Родитель",
    "ВМО": "ВМО",
    "Наименование": "Наименование",
    "Краткое наименование": "Краткое наименование",
    "Тип ВМО": "Тип ВМО",
    "Округ": "Округ",
    "ОКАТО": "ОКАТО"
  },
  "$from": "Tree",
  "$views": {
    "Tree": {
      "$context": "main",
      "$select": {
        "Код ВМО2": "Код ВМО",
        "Родитель": "Родитель",
        "ВМО": "ВМО",
        "Наименование": "Наименование",
        "Краткое наименование": "Краткое наименование",
        "Тип ВМО": "Тип ВМО",
        "Округ": "Округ",
        "ОКАТО": "ОКАТО"
      },
      "$recursiveTree": {
        "$idField": "Код ВМО2",
        "$parentIdField": "Родитель",
        "$startFilter": {
          "Код ВМО": {
            "$eq": {
              "$const": "0"
            }
          }
        }
      }
    }
  }
}

{
  "$context": "main",
  "$distinct": true,
  "$select": {
    "Код ВМО2": "Код ВМО",
    "Родитель": "Родитель",
    "ВМО": "ВМО",
    "Наименование": "Наименование",
    "Краткое наименование": "Краткое наименование",
    "Тип ВМО": "Тип ВМО",
    "Округ": "Округ",
    "ОКАТО": "ОКАТО"
  },
  "$recursiveTree": {
    "$idField": "Код ВМО2",
    "$parentIdField": "Родитель",
    "$direction": 0,
    "$startFilter": {
      "Код ВМО": {
        "$eq": {
          "$const": "0"
        }
      }
    }
  }
}


WITH
AAA AS (SELECT * FROM public."Справочник муниципалитетов"),
TREE AS (
	(WITH
		RECURSIVE RUP AS (
			SELECT Q1."Код ВМО" AS "Код ВМО2", Q1."Родитель", Q1."Наименование"
			FROM AAA Q1
			WHERE Q1."Родитель" = '0'

			UNION ALL

			SELECT Q1."Код ВМО" AS "Код ВМО2", Q1."Родитель", Q1."Наименование"
			FROM AAA as Q1
			JOIN RUP
			ON Q1."Код ВМО" = RUP."Родитель"
		)
	SELECT *
	FROM RUP)
	UNION
	(WITH
		RECURSIVE RDOWN AS (
			SELECT Q1."Код ВМО" AS "Код ВМО2", Q1."Родитель", Q1."Наименование"
			FROM public."Справочник муниципалитетов" Q1
			WHERE Q1."Родитель" = '0'

			UNION ALL

			SELECT Q1."Код ВМО" AS "Код ВМО2", Q1."Родитель", Q1."Наименование"
			FROM AAA as Q1
			JOIN RDOWN
			ON RDOWN."Код ВМО2" = Q1."Родитель"
		)
	SELECT *
	FROM RDOWN)
)
SELECT DISTINCT * FROM TREE

