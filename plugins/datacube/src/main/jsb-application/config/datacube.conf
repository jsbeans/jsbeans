datacube = {
  folder = "../web"
  http-port = 8888
  widgets = {
    path = "widgets"
  }
  queryCache = {
    enabled = true
#  	batchSize = 10
#	  closeIteratorTimeout = 60000
#	  controllerTickInterval = 5000
	  cubeInvalidateInterval = 600000
  }

  debug = false

  query.trace.enabled = true

  # если true, то транслироваться будут только запросы к провадерам, если false - будет попытка транслировать запрос целиком
  query.translator.skipQueries.enabled = false

  # Если true, то запуск запроса транслятором осуществляется при первом next(), если false - при построении итератора
  query.translator.lazy.enabled = true

  query.translators = {
    #    "DataCube.Providers.SqlTableDataProvider" = "DataCube.Query.Translators.SQLTranslator"
    "DataCube.Providers.SqlTableDataProvider" = "DataCube.Query.Translators.SQLViewsTranslator"
  }

  query.transformers = [
    ## встраивание срезов в запрос
    "DataCube.Query.Transforms.EmbedSlices",
    ## привести сортировку к единому стилю
    "DataCube.Query.Transforms.NormalizeSort",
    ## привести фильтры к единому стилю
    "DataCube.Query.Transforms.NormalizeFilters",
    ## заменить алиасы представляющие поля куба "как есть"
    "DataCube.Query.Transforms.PatchDirectFieldsAliases",
    ## развернуть сложные операторы - подставить выражения
    "DataCube.Query.Transforms.UnwrapComplexOperators",
    ## встроить $globalFilter во все запросы к кубу
    "DataCube.Query.Transforms.PropagateGlobalFilter",
    ## привести фильтры к единому стилю
    "DataCube.Query.Transforms.NormalizeFilters",
    ## упорядочить $select
    "DataCube.Query.Transforms.OrderSelect",
    ## добавить/обновить названия контекстов запросов
    "DataCube.Query.Transforms.DefineContexts",
    #    ## встроить тела вьюх в запрос
    #    "DataCube.Query.Transforms.EmbedViewQueries",
    #    ## объединить одинаковые запросы и вынести во вьюхи
    #    "DataCube.Query.Transforms.NestedQueryOptimization",
    ## сгенерировать и вставить в $from структуру слияний и объединений источников куба
    "DataCube.Query.Transforms.EmbedCubeBody",
  ]

}
