datacube = {
  query.trace.enabled = true

  # если true, то транслироваться будут только запросы к провадерам, если false - будет попытка транслировать запрос целиком
  query.translator.skipQueries.enabled = false

  # Если true, то запуск запроса транслятором осуществляется при первом next(), если false - при построении итератора
  query.translator.lazy.enabled = true

  query.translators = {

    "DataCube.Query.Translators.SQLTranslator" = {
      providers = [
//        "DataCube.Providers.SqlTableDataProvider",
        "DataCube.Model.SqlTable",
      ]
      transformers = [
        ## Упорядочить запросы в $views
        "DataCube.Query.Transforms.OrderQueryViews",
        "DataCube.Query.Transforms.SimplyContexts",
      ]
    }

    "DataCube.Query.Translators.MongodbAggregateTranslator" = {
      providers = [
//        "DataCube.Providers.MongoDataProvider",
        "DataCube.Model.MongoCollection"
      ]
      transformers = [
        ## вынести глобальные вложенные запросы в запрос-обертку
        "DataCube.Query.Transforms.WrapGlobalSubQueries",
      ]
    }
  }
# TODO необходимо дополнительно разделить трансформер на 2:
# 1) статическую подготовку - сохранять в срезе
# 2) runtime - выполнять непосредственно перед выполнением запроса
# TODO при вставке среза необходимо выполнять тансформацию

  query.transformers = [
    ## построение тела запроса (встраивание "самых легких" подходящих срезов вместо $from/$cube)
    "DataCube.Query.Transforms.AssemblyQueryBody",

    ## приведение контекстов и названий в $views к равенству
    "DataCube.Query.Transforms.NormalizeViewsContext",

    ## встроить $globalFilter во все запросы к кубу
    "DataCube.Query.Transforms.PropagateGlobalFilter",

    ## заменить алиасы представляющие поля куба "как есть"
    "DataCube.Query.Transforms.PatchDirectFieldsAliases",

    ## пребразование $postFilter - обернуть оригинальный запрос запросом с фильтром
    "DataCube.Query.Transforms.UnwrapPostFilter",

//    ## добавить/обновить названия контекстов запросов
//    "DataCube.Query.Transforms.DefineContexts",

    ## развернуть сложные операторы - подставить выражения
    "DataCube.Query.Transforms.UnwrapComplexOperators",

    ## упорядочить $select и добавить $groupBy, если есть глобальная агрегация
    "DataCube.Query.Transforms.OrderSelect",
    ## привести фильтры к единому стилю
    "DataCube.Query.Transforms.NormalizeFilters",
    ## привести сортировку к единому стилю
    "DataCube.Query.Transforms.NormalizeSort",

    ## встроить тела вьюх в запрос - требуется, т.к. у всех запросов должны быть уникальные контексты
//    "DataCube.Query.Transforms.EmbedViewQueries",

    ## добавить/обновить названия контекстов запросов
    "DataCube.Query.Transforms.DefineContexts",

    #    ## объединить одинаковые запросы и вынести во вьюхи
    #    "DataCube.Query.Transforms.NestedQueryOptimization",
//    ## оптиизация фильтров - вынесение условий ближе к первичным источникам (ближе к индексам БД)
//    "DataCube.Query.Transforms.PropagateSourceFilters",
  ]

  query.accelerators = [
    "DataCube.Query.Accelerator.QuerySplitterAccelerator",
  ]

}


