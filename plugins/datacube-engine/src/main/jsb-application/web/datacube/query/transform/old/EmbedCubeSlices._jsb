/** DataCube - jsBeans extension | jsbeans.org (MIT Licence) | (c) Special Information Systems, LLC */

{
	$name: 'DataCube.Query.Transforms.EmbedCubeSlice',
	$parent: 'DataCube.Query.Transforms.Transformer',
	$session: false,
	$server: {
		$require: [
		    'DataCube.Query.QueryUtils',
		    'DataCube.Query.Transforms.QueryTransformer',
		    'DataCube.Query.Transforms.EmbedSlices',
		    'DataCube.Query.Weight.QueryWeigher',
        ],

        $constructor: function(){
            $base();
            $this.embedSlices = new EmbedSlices();
            $this.weigher = new QueryWeigher();
        },


	    destroy: function(){
	        $this.embedSlices.destroy();
	        $this.weigher.destroy();
	        $base();
	    },

        /** Find and replace $cube -> $from (2th generation)
        */
		transform: function(rootQuery, defaultCube){
		    function getView(name){
		        return rootQuery.$views[name];
            }
debugger;
		    QueryUtils.walkQueries(rootQuery, {},
		        function() { },
		        function(query){
		            if (query.$cube) {
		                var cube = QueryUtils.getQueryCube(query.$cube, defaultCube);
                        var slices = $this._findMatchedSlices(query, cube, rootQuery);
                        var slice  = $this._selectTheEasiestSlice(slices, cube, rootQuery);

                        $this._embedSlice(query,slice, rootQuery);
                    }
                }
            );

		    QueryUtils.defineContextQueries(rootQuery);
            return rootQuery;
		},

		_findMatchedSlices: function(query, cube, rootQuery) {
		    var usedFields = QueryUtils.extractInputFields(query, cube, rootQuery);

		    var slices = [];
            var cubeSlices = cube.getSlices();
		    for(var sid in cubeSlices) {
		        var slice = cubeSlices[sic];
		        var sliceQuery = slice.getQuery();
		        var sliceFields = QueryUtils.extractOutputFields(sliceQuery);
		        var all = true;
		        for(var field in usedFields) {
		            if (!sliceFields[field]) {
		                all = false;
		                break;
		            }
		        }
		        if (all) {
		            slices.push(slice);
		        }
		    }
		    return slices;
		},
		_calculateSliceWeight: function(slice, rootQuery) {
            var w = $this.weigher.calculateQuery(slice.getQuery(), rootQuery);
            return w;
		},

		_selectTheEasiestSlice: function(slices, cube, rootQuery){
		    var weights = {};
		    for(var i = 0; i < slices.length; i++) {
		        var slice = slices[i];
                var localId = $this.embedSlices.sliceLocalId(slice);
                weights[localId] = $this._calculateSliceWeight(slice, rootQuery);
		    }

		    slices.sort(function min2max(a,b){
		        var aId = $this.embedSlices.sliceLocalId(a);
		        var bId = $this.embedSlices.sliceLocalId(a);
		        var aW = weights[aId];
		        var bW = weights[bId];
		        if (aW > bW) return 1;
		        if (aW < bW) return -1;
		        return 0;
		    });

		},

        _embedSlice: function(query, slice, rootQuery){
            query.$from = $this.embedSlices.sliceLocalId(slice);
            if (!rootQuery.$views[query.$from]) {
                var query = rootQuery.$views[query.$from] = $this.embedSlices._rebuildQuery(slice.getQuery(), query.$from);
            }
        },
	},
}