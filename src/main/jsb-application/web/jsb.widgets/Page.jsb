/*
 * This file is the part of jsBeans, high-level JavaScript client-server framework.
 * The contents of this file are subject to the MIT Licence (MIT).
 * (c) aa@sis.ru, da@sis.ru, Special Information Systems, LLC, 2011-2023
 *
 * Настоящий файл является частью клиент-серверной JavaScript платформы.
 * Условия использования и распространения содержимого данного файла соответствуют программному обеспечению с открытыми исходными кодами и равнозначно MIT Licence (MIT).
 * Авторские права принадлежат aa@sis.ru, da@sis.ru, ООО СИС, 2011-2023гг.
 */

{
	$name:'JSB.Widgets.Page',
	$parent: 'JSB.Widgets.Widget',
	$http: true,
	$server:{
		$require: ['JSB.System.Kernel', 'JSB.Web'],
		
		get: function(params, url){
			var htmlSection = this.getJsb()['$html'];
			
			function urlJoin(pObj, bRelative){
				// expand url
				let pIdx = url.indexOf('?'), leftPart, rightPart;
				if(pIdx < 0){
					leftPart = url;
					rightPart = '';
				} else {
					leftPart = url.substr(0, pIdx);
					rightPart = url.substr(pIdx + 1);
				}
				
				if(bRelative){
					let idx = leftPart.lastIndexOf('\/');
					leftPart = leftPart.substr(idx);
				}
				
				// parse right part
				let rMap = {};
				if(rightPart.length > 0){
					var rx = /([^\=\&]+)(\=([^\&]+))?/g;
					while(true){
						let m = rx.exec(rightPart);
						if(!m){
							break;
						}
						rMap[m[1]] = m[3];
					}
				}
				JSB.merge(rMap, pObj);
				let oUrl = leftPart;
				if(Object.keys(rMap).length > 0){
					let bWas = false;
					for(let p in rMap){
						if(JSB.isNull(rMap[p])){
							continue;
						}
						oUrl += (bWas ? '&' : '?');
						oUrl += p + '=' + rMap[p];
						bWas = true;
					}
				}
				return oUrl;
			}
			
			if(params.r){
				switch(params.r){
				case 'pwa':
					let manObj = JSB.merge({
						'start_url': urlJoin({'r':null}),
						'name': htmlSection && htmlSection.title,
						'background_color': '#fff',
						'display': 'standalone',
						'description': htmlSection && htmlSection.title,
						
					}, htmlSection.pwa);
					return Web.respond(manObj, {
						mode:'json',
						contentType: 'application/manifest+json'
					});
					break;
				}
			} else {
			$this.publish('JSB.Widgets.Page.get');
			return Web.respond(`#dot <!DOCTYPE html>
<!--
  ~ This file generated by jsBeans framework.
  ~ jsBeans v2.6.11 | jsbeans.org | MIT Licence | (c) 2011-2023 Special Information Systems, LLC
-->
<html>
<head>
	{{? htmlSection && htmlSection.headBefore && htmlSection.headBefore.length > 0}}
		{{=htmlSection.headBefore}}
	{{?}}
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=1024, user-scalable=no" />
	{{?htmlSection.pwa}}
	<link rel="manifest" href="{{=urlJoin({'r':'pwa'})}}">
	{{?}}
	{{? htmlSection && htmlSection.title}}
	<title>{{=htmlSection.title}}</title>
	{{?}}
	{{? htmlSection && htmlSection.favicon}}
	{{
		function extractIconType(){
			var icon = htmlSection.favicon;
			if(/\.ico$/i.test(icon)){
				return 'image/x-icon';
			} else if(/\.svg$/i.test(icon)){
				return 'image/svg+xml';
			} else if(/\.gif$/i.test(icon)){
				return 'image/gif';
			} else if(/\.jpg$/i.test(icon)){
				return 'image/jpeg';
			} else if(/\.png$/i.test(icon)){
				return 'image/png';
			} else if(/\.bmp$/i.test(icon)){
				return 'image/bmp';
			}
		}
	}}
	<link rel="shortcut icon" type="{{=extractIconType()}}" href="{{=htmlSection.favicon}}"/>
	<link rel="icon" type="{{=extractIconType()}}" href="{{=htmlSection.favicon}}"/>
	{{?}}
 	<script type="text/javascript" src="/jsbeans.jsb;{{=Web.getSessionIdPathParameterName()}}={{=Kernel.session()}}?refid={{=this.getId()}}"></script>
 	
 	<style>
 		body {
			overflow: hidden;
			margin: 0;
		}

		.mainContainer {
			width: 100%;
			height: 100%;
			left: 0%;
			top: 0%;
			display: block;
			position: absolute !important;
		}
 	</style>
 	{{? htmlSection && htmlSection.headAfter && htmlSection.headAfter.length > 0}}
 		{{=htmlSection.headAfter}}
	{{?}}
</head>

<body>
	{{? htmlSection && htmlSection.bodyBefore && htmlSection.bodyBefore.length > 0}}
		{{=htmlSection.bodyBefore}}
	{{?}}
	<div jsb="{{=this.getJsb().$name}}" bind="{{=this.getId()}}" class="mainContainer" ></div>
	{{? htmlSection && htmlSection.bodyAfter && htmlSection.bodyAfter.length > 0}}
		{{=htmlSection.bodyAfter}}
	{{?}}
</body>
</html>`,{
	contentType: 'text/html; charset=utf-8'
});
		}
		}


	}
}